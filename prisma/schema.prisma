// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserPrivilege {
  admin
  sales
  stock
}

enum UnitType {
  unit
  kilo
}

enum StockStatus {
  available
  expired
  blocked
}

model User {
  id            String        @id @default(uuid())
  name          String        @unique
  full_name     String
  email         String?       @unique
  phone         String
  password_hash String
  picture       String?
  created_at    DateTime      @default(now())
  privilege     UserPrivilege @default(sales)
  Product       Product[]
  Stock         Stock[]

  @@map("tb_users")
}

model Product {
  id             String   @id @default(uuid())
  barCode        String   @unique
  name           String   @unique
  description    String?
  unitType       UnitType @default(unit)
  sellingPrice   Decimal
  buyingPrice    Decimal
  active         Boolean  @default(true)
  expirationDays Int
  pictureUrl     String?
  createdAt      DateTime @default(now())

  created_by User @relation(fields: [userId], references: [id])

  category_id Category @relation(fields: [categoryId], references: [id])

  userId     String
  categoryId String
  Stock      Stock[]

  @@map("tb_produts")
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  color String @default("#ffffff3d")

  Product Product[]

  @@map("tb_category")
}

model Supplier {
  id           String   @id @default(uuid())
  name         String   @unique
  nickname     String   @unique
  nif          String   @unique
  phone        String
  email        String   @unique
  active       Boolean  @default(true)
  address      String
  city         String
  observations String?
  created_at   DateTime @default(now())
  Stock        Stock[]

  @@map("tb_supplier")
}

model Stock {
  id               String      @id @default(uuid())
  batch            String      @unique
  initialQuantity  Int
  currentQuantity  Int         @default(0)
  minimumQuantity Int         
  entryDate        DateTime
  expirationDate   DateTime
  purchasePrice    Decimal
  status           StockStatus @default(available)
  location         String
  observations     String
  createdAt        DateTime    @default(now())
  id_supplier      Supplier    @relation(fields: [supplierId], references: [id])
  supplierId       String
  createdBy        User        @relation(fields: [userId], references: [id])
  userId           String
  produto_id       Product     @relation(fields: [productId], references: [id])
  productId        String

  @@map("tb_stock")
}
